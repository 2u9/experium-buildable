//Deobfuscated with https://github.com/SimplyProgrammer/Minecraft-Deobfuscator3000 using mappings "C:\Users\Luni\Documents\1.12 stable mappings"!

// 
// Decompiled by Procyon v0.5.36
// 

package dev._3000IQPlay.experium.features.modules.exploit;

import dev._3000IQPlay.experium.event.events.PacketEvent;
import net.minecraft.init.Items;
import net.minecraftforge.event.entity.living.LivingEntityUseItemEvent;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import dev._3000IQPlay.experium.event.events.UpdateWalkingPlayerEvent;
import net.minecraft.network.Packet;
import dev._3000IQPlay.experium.features.command.Command;
import net.minecraft.util.math.BlockPos;
import java.util.LinkedList;
import net.minecraft.network.play.client.CPacketConfirmTeleport;
import net.minecraft.network.play.client.CPacketPlayer;
import java.util.Queue;
import dev._3000IQPlay.experium.features.setting.Setting;
import dev._3000IQPlay.experium.features.modules.Module;

public class ChorusLag extends Module
{
    public final Setting<Integer> sDelay;
    int delay;
    int delay2;
    boolean ateChorus;
    boolean hackPacket;
    boolean posTp;
    double posX;
    double posY;
    double posZ;
    Queue<CPacketPlayer> packets;
    Queue<CPacketConfirmTeleport> packetss;
    
    public ChorusLag() {
        super("ChorusLag", "Makes your teleport delayed serverside", Category.EXPLOIT, true, false, false);
        this.sDelay = (Setting<Integer>)this.register(new Setting("Delay", (T)18, (T)0, (T)500));
        this.delay = 0;
        this.delay2 = 0;
        this.ateChorus = false;
        this.hackPacket = false;
        this.posTp = false;
        this.packets = new LinkedList<CPacketPlayer>();
        this.packetss = new LinkedList<CPacketConfirmTeleport>();
    }
    
    @Override
    public void onEnable() {
        this.ateChorus = false;
        this.hackPacket = false;
        this.posTp = false;
    }
    
    @Override
    public void onUpdate() {
        if (this.ateChorus) {
            ++this.delay;
            ++this.delay2;
            if (!ChorusLag.mc.player.getPosition().equals((Object)new BlockPos(this.posX, this.posY, this.posZ)) && !this.posTp && ChorusLag.mc.player.getDistance(this.posX, this.posY, this.posZ) > 1.0) {
                ChorusLag.mc.player.setPosition(this.posX, this.posY, this.posZ);
                this.posTp = true;
            }
        }
        if (this.ateChorus && this.delay2 > this.sDelay.getValue()) {
            this.ateChorus = false;
            this.delay = 0;
            this.hackPacket = true;
            this.delay2 = 0;
            this.sendPackets();
        }
        if (this.delay2 == this.sDelay.getValue() - 40) {
            Command.sendMessage("Chorusing In 2 seconds");
        }
    }
    
    public void sendPackets() {
        while (!this.packets.isEmpty()) {
            ChorusLag.mc.player.connection.sendPacket((Packet)this.packets.poll());
        }
        while (!this.packetss.isEmpty()) {
            ChorusLag.mc.player.connection.sendPacket((Packet)this.packetss.poll());
        }
        this.hackPacket = false;
        this.delay2 = 0;
        this.ateChorus = false;
    }
    
    @SubscribeEvent
    public void Event(final UpdateWalkingPlayerEvent eventPlayerTravel) {
    }
    
    @SubscribeEvent
    public void finishEating(final LivingEntityUseItemEvent.Finish event) {
        if (event.getEntity() == ChorusLag.mc.player && event.getResultStack().getItem().equals(Items.CHORUS_FRUIT)) {
            this.posX = ChorusLag.mc.player.posX;
            this.posY = ChorusLag.mc.player.posY;
            this.posZ = ChorusLag.mc.player.posZ;
            this.posTp = false;
            this.ateChorus = true;
        }
    }
    
    @SubscribeEvent
    public void finishEating(final LivingEntityUseItemEvent.Start event) {
    }
    
    @SubscribeEvent
    public void onUpdate(final PacketEvent.Send event) {
        if (event.getPacket() instanceof CPacketConfirmTeleport && this.ateChorus && this.delay2 < this.sDelay.getValue()) {
            this.packetss.add(event.getPacket());
            event.setCanceled(true);
        }
        if (event.getPacket() instanceof CPacketPlayer && this.ateChorus && this.delay2 < this.sDelay.getValue()) {
            this.packets.add(event.getPacket());
            event.setCanceled(true);
        }
    }
}
