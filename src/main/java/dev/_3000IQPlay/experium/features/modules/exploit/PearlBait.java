//Deobfuscated with https://github.com/SimplyProgrammer/Minecraft-Deobfuscator3000 using mappings "C:\Users\Luni\Documents\1.12 stable mappings"!

// 
// Decompiled by Procyon v0.5.36
// 

package dev._3000IQPlay.experium.features.modules.exploit;

import net.minecraft.entity.player.EntityPlayer;
import java.util.Iterator;
import net.minecraft.entity.item.EntityEnderPearl;
import net.minecraft.entity.Entity;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import net.minecraft.network.Packet;
import java.util.Comparator;
import net.minecraft.network.play.server.SPacketSpawnObject;
import dev._3000IQPlay.experium.event.events.PacketEvent;
import java.util.concurrent.ConcurrentLinkedQueue;
import net.minecraft.network.play.client.CPacketPlayer;
import java.util.Queue;
import dev._3000IQPlay.experium.features.setting.Setting;
import dev._3000IQPlay.experium.features.modules.Module;

public class PearlBait extends Module
{
    public final Setting<Boolean> guarantee;
    private final Queue<CPacketPlayer> packets;
    private int thrownPearlId;
    
    public PearlBait() {
        super("PearlBait", "Forces your enemy to cry", Category.EXPLOIT, true, false, false);
        this.guarantee = (Setting<Boolean>)this.register(new Setting("Guarantee", (T)true));
        this.packets = new ConcurrentLinkedQueue<CPacketPlayer>();
        this.thrownPearlId = -1;
    }
    
    @SubscribeEvent
    public void onPacketReceive(final PacketEvent.Receive event) {
        if (event.getPacket() instanceof SPacketSpawnObject) {
            final SPacketSpawnObject packet = event.getPacket();
            if (packet.getType() == 65) {
                final SPacketSpawnObject sPacketSpawnObject;
                final SPacketSpawnObject sPacketSpawnObject2;
                PearlBait.mc.world.playerEntities.stream().min(Comparator.comparingDouble(p -> p.getDistance(sPacketSpawnObject.getX(), sPacketSpawnObject.getY(), sPacketSpawnObject.getZ()))).ifPresent(player -> {
                    if (player.equals((Object)PearlBait.mc.player)) {
                        if (!(!PearlBait.mc.player.onGround)) {
                            PearlBait.mc.player.motionX = 0.0;
                            PearlBait.mc.player.motionY = 0.0;
                            PearlBait.mc.player.motionZ = 0.0;
                            PearlBait.mc.player.movementInput.moveForward = 0.0f;
                            PearlBait.mc.player.movementInput.moveStrafe = 0.0f;
                            PearlBait.mc.player.connection.sendPacket((Packet)new CPacketPlayer.Position(PearlBait.mc.player.posX, PearlBait.mc.player.posY + 1.0, PearlBait.mc.player.posZ, false));
                            this.thrownPearlId = sPacketSpawnObject2.getEntityID();
                        }
                    }
                });
            }
        }
    }
    
    @SubscribeEvent
    public void onPacketSend(final PacketEvent.Send event) {
        if (event.getPacket() instanceof CPacketPlayer && this.guarantee.getValue() && this.thrownPearlId != -1) {
            this.packets.add(event.getPacket());
            event.setCanceled(true);
        }
    }
    
    @Override
    public void onUpdate() {
        if (this.thrownPearlId != -1) {
            for (final Entity entity : PearlBait.mc.world.loadedEntityList) {
                if (entity.getEntityId() == this.thrownPearlId && entity instanceof EntityEnderPearl) {
                    final EntityEnderPearl pearl = (EntityEnderPearl)entity;
                    if (!pearl.isDead) {
                        continue;
                    }
                    this.thrownPearlId = -1;
                }
            }
        }
        else if (!this.packets.isEmpty()) {
            do {
                PearlBait.mc.player.connection.sendPacket((Packet)this.packets.poll());
            } while (!this.packets.isEmpty());
        }
    }
}
