//Deobfuscated with https://github.com/SimplyProgrammer/Minecraft-Deobfuscator3000 using mappings "C:\Users\Luni\Documents\1.12 stable mappings"!

/*
 * Decompiled with CFR 0.150.
 * 
 * Could not load the following classes:
 *  net.minecraft.item.ItemAxe
 *  net.minecraft.item.ItemSign
 *  net.minecraft.network.Packet
 *  net.minecraft.network.play.client.CPacketPlayerDigging
 *  net.minecraft.network.play.client.CPacketPlayerDigging$Action
 *  net.minecraft.tileentity.TileEntity
 *  net.minecraft.tileentity.TileEntitySign
 *  net.minecraft.util.EnumFacing
 *  net.minecraft.util.EnumHand
 *  net.minecraft.util.math.BlockPos
 */
package dev._3000IQPlay.experium.features.modules.exploit;

import dev._3000IQPlay.experium.features.command.Command;
import dev._3000IQPlay.experium.features.modules.Module;
import dev._3000IQPlay.experium.features.setting.Setting;
import dev._3000IQPlay.experium.util.BlockUtil;
import dev._3000IQPlay.experium.util.InventoryUtil;
import dev._3000IQPlay.experium.util.MathUtil;
import dev._3000IQPlay.experium.util.Timer;
import net.minecraft.item.ItemAxe;
import net.minecraft.item.ItemSign;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.CPacketPlayerDigging;
import net.minecraft.tileentity.TileEntity;
import net.minecraft.tileentity.TileEntitySign;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.EnumHand;
import net.minecraft.util.math.BlockPos;

public class AutoSignKick
extends Module {
    public Setting<Integer> switchDelay = this.register(new Setting<Integer>("SwitchDelay", 100, 0, 5000));
    public Setting<Integer> placeDelay = this.register(new Setting<Integer>("PlaceDelay", 100, 0, 5000));
    public Setting<Integer> mineDelay = this.register(new Setting<Integer>("MineDelay", 100, 0, 5000));
    public Setting<Integer> range = this.register(new Setting<Integer>("Range", 2, 1, 20));
    Timer placeTimer = new Timer();
    Timer switchTimer = new Timer();
    Timer mineTimer = new Timer();
    private boolean hadBreak;

    public AutoSignKick() {
        super("AutoSignKick", "stop being lazy lmao", Module.Category.EXPLOIT, true, false, false);
    }

    @Override
    public void onEnable() {
        this.hadBreak = false;
    }

    @Override
    public void onDisable() {
        this.hadBreak = false;
    }

    @Override
    public void onUpdate() {
        for (TileEntity tileEntity : AutoSignKick.mc.world.loadedTileEntityList) {
            if (!(tileEntity instanceof TileEntitySign) || !(AutoSignKick.mc.player.getDistanceSq(tileEntity.getPos()) <= MathUtil.square(this.range.getValue().intValue()))) continue;
            Command.sendMessage("Sign located at X: " + tileEntity.getPos().getX() + ", Y: " + tileEntity.getPos().getY() + ", Z: " + tileEntity.getPos().getZ());
            BlockPos posTile = tileEntity.getPos();
            if (this.hadBreak) continue;
            this.axeSwitch();
            this.mineBlock(posTile);
            InventoryUtil.switchToHotbarSlot(ItemSign.class, false);
            Command.sendMessage("Changed to sign hotbar.");
            this.switchTimer.reset();
            this.place(posTile);
            Command.sendMessage("Done!");
            this.disable();
            this.hadBreak = true;
        }
    }

    private void axeSwitch() {
        if (this.switchTimer.passedMs(this.switchDelay.getValue().longValue() * 3L)) {
            InventoryUtil.switchToHotbarSlot(ItemAxe.class, false);
            Command.sendMessage("Switched to Axe");
            this.switchTimer.reset();
        }
    }

    private void mineBlock(BlockPos pos) {
        if (this.mineTimer.passedMs(this.mineDelay.getValue().longValue() * 3L)) {
            AutoSignKick.mc.player.connection.sendPacket((Packet)new CPacketPlayerDigging(CPacketPlayerDigging.Action.START_DESTROY_BLOCK, pos, EnumFacing.UP));
            Command.sendMessage("Mined");
            this.mineTimer.reset();
        }
    }

    private void place(BlockPos pos) {
        if (this.placeTimer.passedMs(this.placeDelay.getValue().longValue() * 3L)) {
            BlockUtil.placeBlockSmartRotate(pos, EnumHand.MAIN_HAND, true, true, false);
            Command.sendMessage("Placed sign!");
            this.placeTimer.reset();
        }
    }
}

