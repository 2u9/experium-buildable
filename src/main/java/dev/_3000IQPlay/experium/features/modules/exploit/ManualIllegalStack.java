//Deobfuscated with https://github.com/SimplyProgrammer/Minecraft-Deobfuscator3000 using mappings "C:\Users\Luni\Documents\1.12 stable mappings"!

// 
// Decompiled by Procyon v0.5.36
// 

package dev._3000IQPlay.experium.features.modules.exploit;

import net.minecraft.network.Packet;
import net.minecraft.network.play.client.CPacketUseEntity;
import net.minecraft.util.EnumHand;
import net.minecraft.entity.passive.AbstractChestHorse;
import net.minecraft.client.gui.inventory.GuiScreenHorseInventory;
import java.util.Comparator;
import net.minecraft.entity.Entity;
import dev._3000IQPlay.experium.features.modules.Module;

public class ManualIllegalStack extends Module
{
    private boolean noBypass;
    
    public ManualIllegalStack() {
        super("ManualIllegalStack", "Right clicks the donkey chest to perform the Illegal Stack/Salc1 Dupe", Category.EXPLOIT, true, false, false);
    }
    
    @Override
    public void onEnable() {
        super.onEnable();
        final Entity l_Entity = (Entity)ManualIllegalStack.mc.world.loadedEntityList.stream().filter(p_Entity -> this.isValidEntity(p_Entity)).min(Comparator.comparing(p_Entity -> ManualIllegalStack.mc.player.getDistance(p_Entity))).orElse(null);
        final AbstractChestHorse abstractChestHorse;
        if (ManualIllegalStack.mc.currentScreen instanceof GuiScreenHorseInventory && l_Entity instanceof AbstractChestHorse && ManualIllegalStack.mc.player.getRidingEntity() != null && (abstractChestHorse = (AbstractChestHorse)l_Entity).hasChest()) {
            this.noBypass = true;
            ManualIllegalStack.mc.player.connection.sendPacket((Packet)new CPacketUseEntity(l_Entity, EnumHand.MAIN_HAND, l_Entity.getPositionVector()));
            this.noBypass = false;
            this.toggle();
        }
    }
    
    private boolean isValidEntity(final Entity entity) {
        final AbstractChestHorse l_AbstractChestHorse;
        return entity instanceof AbstractChestHorse && !(l_AbstractChestHorse = (AbstractChestHorse)entity).isChild() && l_AbstractChestHorse.isTame();
    }
    
    public boolean ignoreMountBypass() {
        return this.noBypass;
    }
}
